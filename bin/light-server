#!/usr/bin/env node

/**
 * light-server
 *
 * Serve, watch, exucute commands and live-reload, all in one.
 *
 * Copyright (c) 2018 by Tianxiang Chen
 */
'use strict'

var LightServer = require('../index')
var rc = require('../rc')
var program = require('commander')

function main (argv) {
  function collect (val, memo) {
    memo.push(val)
    return memo
  }

  program.version(require('../package').version)
    .option('-c, --config <configfile>', 'read options from config file')
    .option('-s, --serve <directory>', 'serve the directory as static http')
    .option('--servePrefix <prefix>', 'virtual path prefix for static directory')
    .option('-p, --port <port>', 'http server port, default 4000', parseInt)
    .option('-b, --bind <bind>', 'bind to a specific host, default 0.0.0.0')
    .option('-w, --watchexp <watch expression>', 'watch expression, repeatable', collect, [])
    .option('-i, --interval <watch inteval>', 'interval in ms of watching, default 500', parseInt)
    .option('-d, --delay <livereolad delay>', 'delay in ms before triggering live reload, default 0', parseInt)
    .option('-x, --proxy <upstreamurl>', 'when file not found, proxy the request to another server')
    .option('--proxypath <proxypath>', 'only send to proxy when path starts with this pattern, default is "/", repeatable', collect, [])
    .option('--no-reload', 'disable live-reloading')
    .option('-q, --quiet', 'quiet mode with minimum log message')
    .option('-o, --open', 'open browser automatically')
    .option('--http2', 'enable http2 tls mode')
    .option('--historyindex <historyindex>', '404 fallback index path, used by SPA development')
    .on('--help', function () {
      console.log('  Examples:')
      console.log('')
      console.log('    $ light-server -s . -p 7000')
      console.log('    $ light-server -s dist --http2 -o')
      console.log('    $ light-server -s dist --historyindex "/index.html"')
      console.log('    $ light-server -s . -w "*.js, src/** # npm run build && echo wow!"')
      console.log('    $ light-server -s . -x http://localhost:8000')
      console.log('    $ light-server -s . -x http://localhost:8000 --servePrefix /assets')
      console.log('    $ light-server -s . -b 10.0.0.1')
      console.log('    $ light-server -x http://localhost:9999 --proxypath "/api" -w "public/**"')
      console.log('    $ light-server -s static -w "**/*.css # # reloadcss"')
      console.log('    $ light-server -c .lightserverrc')
      console.log('')
      console.log('  Watch expression syntax: "files[,files] # [command to run] # [reload action]"')
      console.log('    3 parts delimited by #')
      console.log('    1st part: files to watch, support glob format, delimited by ","')
      console.log('    2nd part: (optional) command to run, before reload')
      console.log('    3rd part: (optional) reload action, default is "reload", also support "reloadcss", "no-reload"')
      console.log('    Examples: ')
      console.log('      "**/*.js, index.html # npm run build # reload"')
      console.log('      "*.css # # reloadcss"')
      console.log('      "** # make"')
      console.log('')
    })

  if (argv.length === 0) {
    process.argv.push('--help')
  }

  program.parse(process.argv)

  var options = {
    port: 4000,
    interval: 500,
    delay: 0,
    bind: undefined,
    proxypaths: ['/'],
    watchexps: []
  }
  if (program.config) {
    Object.assign(options, rc(program.config))
  }

  // cli can override config file
  var cliOptions = {
    port: program.port,
    interval: program.interval,
    delay: program.delay,
    bind: program.bind,
    serve: program.serve,
    servePrefix: program.servePrefix,
    watchexps: program.watchexp.length ? program.watchexp : undefined,
    proxy: program.proxy,
    proxypaths: program.proxypath.length ? program.proxypath: undefined,
    noReload: !program.reload,
    quiet: program.quiet,
    open: program.open,
    http2: program.http2,
    historyindex: program.historyindex
  }
  cliOptions = JSON.parse(JSON.stringify(cliOptions)) // remove undefined properties
  Object.assign(options, cliOptions)

  if (!options.serve && !options.watchexps.length && !options.proxy) {
    console.log('Please use http-server and/or watch and/or proxy, but not nothing.')
    process.exit(1)
  }

  LightServer(options).start()
}

main(process.argv.slice(2))
